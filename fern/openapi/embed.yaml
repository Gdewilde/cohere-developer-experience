post:
  x-fern-audiences: [public]
  summary: Embed
  operationId: embed
  parameters:
    - $ref: './types/RequestSource.yaml'
  x-readme:
    samples-languages:
      - python
      - java
      - curl
      - node
      - go
    code-samples:
      - language: go
        name: Cohere Go SDK
        install: go get github.com/cohere-ai/cohere-go/v2
        code:
          $ref: './snippets/go/embed-post/main.go'
      - language: node
        name: Cohere TypeScript SDK
        install: npm i cohere-ai
        code:
          $ref: ./snippets/node/embed-post.ts
      - language: python
        name: Sync
        install: python -m pip install cohere --upgrade
        code:
          $ref: ./snippets/python/embed-post.py
      - language: python
        name: Async
        install: python -m pip install cohere --upgrade
        code:
          $ref: ./snippets/python-async/embed-post.py
      - language: java
        name: Cohere java SDK
        install: implementation 'com.cohere:cohere-java:1.0.4'
        code:
          $ref: ./snippets/java/app/src/main/java/EmbedPost.java
      - language: curl
        name: cURL
        code:
          $ref: ./snippets/curl/embed-post.sh
  responses:
    '400':
      $ref: "./errors/BadRequest.yaml"
    '401':
      $ref: "./errors/Unauthorized.yaml"
    '403':
      $ref: "./errors/Forbidden.yaml"
    '404':
      $ref: "./errors/NotFound.yaml"
    '422':
      $ref: "./errors/UnprocessableEntity.yaml"
    '429':
      $ref: './errors/RateLimit.yaml'
    '498':
      $ref: "./errors/InvalidToken.yaml"
    '499':
      $ref: "./errors/RequestCancelled.yaml"
    '500':
      $ref: "./errors/InternalServerError.yaml"
    '501':
      $ref: "./errors/NotImplemented.yaml"
    '503':
      $ref: "./errors/ServiceUnavailable.yaml"
    '504':
      $ref: "./errors/GatewayTimeout.yaml"
    '200':
      description: OK
      content:
        application/json:
          schema:
            oneOf:
              - $ref: './types/EmbedFloatsResponse.yaml'
              - $ref: './types/EmbedByTypeResponse.yaml'
            discriminator:
              propertyName: response_type
              mapping:
                embeddings_floats: './types/EmbedFloatsResponse.yaml'
                embeddings_by_type: './types/EmbedByTypeResponse.yaml'
      headers:
        X-API-Warning:
          schema:
            type: string
            x-fern-audiences: ['public']
          description: Warning description for incorrect usage of the API
  description: |-
    This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.

    Embeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.

    If you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](/docs/semantic-search).
  requestBody:
    content:
      application/json:
        schema:
          type: object
          x-fern-audiences: ['public']
          properties:
            texts:
              type: array
              x-fern-audiences: ['public']
              minItems: 1
              maxItems: 96
              description: An array of strings for the model to embed. Maximum number of texts
                per call is `96`. We recommend reducing the length of each text
                to be under `512` tokens for optimal quality.
              items:
                type: string
                x-fern-audiences: ['public']
                writeOnly: true
              writeOnly: true
            model:
              type: string
              x-fern-audiences: ['public']
              description: |-
                Defaults to embed-english-v2.0

                The identifier of the model. Smaller "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.

                Available models and corresponding embedding dimensions:

                * `embed-english-v3.0`  1024
                * `embed-multilingual-v3.0`  1024
                * `embed-english-light-v3.0`  384
                * `embed-multilingual-light-v3.0`  384

                * `embed-english-v2.0`  4096
                * `embed-english-light-v2.0`  1024
                * `embed-multilingual-v2.0`  768
              writeOnly: true
            input_type:
              x-fern-audiences: ['public']
              $ref: './types/EmbedInputType.yaml'
            embedding_types:
              type: array
              x-fern-audiences: ['public']
              items:
                $ref: './types/EmbeddingType.yaml'
              description: |-
                Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.

                * `"float"`: Use this when you want to get back the default float embeddings. Valid for all models.
                * `"int8"`: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.
                * `"uint8"`: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.
                * `"binary"`: Use this when you want to get back signed binary embeddings. Valid for only v3 models.
                * `"ubinary"`: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models.
              writeOnly: true
            truncate:
              type: string
              x-fern-audiences: ['public']
              default: END
              enum:
                - NONE
                - START
                - END
              description: |-
                One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.

                Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.

                If `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.
              writeOnly: true
          required:
            - texts
        examples:
          Example:
            value:
              texts:
                - hello
                - goodbye
    description: ''
